{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{'mot': 'où', 'id': 2190}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}, {'mot': '-', 'id': 2195}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}, {'mot': '-', 'id': 2195}, {'mot': 'je', 'id': 2196}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}, {'mot': '-', 'id': 2195}, {'mot': 'je', 'id': 2196}, {'mot': 'enregistrer', 'id': 2197}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}, {'mot': '-', 'id': 2195}, {'mot': 'je', 'id': 2196}, {'mot': 'enregistrer', 'id': 2197}, {'mot': 'mes', 'id': 2198}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}, {'mot': '-', 'id': 2195}, {'mot': 'je', 'id': 2196}, {'mot': 'enregistrer', 'id': 2197}, {'mot': 'mes', 'id': 2198}, {'mot': 'mes', 'id': 2199}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}, {'mot': '-', 'id': 2195}, {'mot': 'je', 'id': 2196}, {'mot': 'enregistrer', 'id': 2197}, {'mot': 'mes', 'id': 2198}, {'mot': 'mes', 'id': 2199}, {'mot': 'bagages', 'id': 2200}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}, {'mot': '-', 'id': 2195}, {'mot': 'je', 'id': 2196}, {'mot': 'enregistrer', 'id': 2197}, {'mot': 'mes', 'id': 2198}, {'mot': 'mes', 'id': 2199}, {'mot': 'bagages', 'id': 2200}, {'mot': '?', 'id': 2201}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}, {'mot': '-', 'id': 2195}, {'mot': 'je', 'id': 2196}, {'mot': 'enregistrer', 'id': 2197}, {'mot': 'mes', 'id': 2198}, {'mot': 'mes', 'id': 2199}, {'mot': 'bagages', 'id': 2200}, {'mot': '?', 'id': 2201}, {'mot': 'je', 'id': 2202}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}, {'mot': '-', 'id': 2195}, {'mot': 'je', 'id': 2196}, {'mot': 'enregistrer', 'id': 2197}, {'mot': 'mes', 'id': 2198}, {'mot': 'mes', 'id': 2199}, {'mot': 'bagages', 'id': 2200}, {'mot': '?', 'id': 2201}, {'mot': 'je', 'id': 2202}, {'mot': 'suis', 'id': 2203}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}, {'mot': '-', 'id': 2195}, {'mot': 'je', 'id': 2196}, {'mot': 'enregistrer', 'id': 2197}, {'mot': 'mes', 'id': 2198}, {'mot': 'mes', 'id': 2199}, {'mot': 'bagages', 'id': 2200}, {'mot': '?', 'id': 2201}, {'mot': 'je', 'id': 2202}, {'mot': 'suis', 'id': 2203}, {'mot': 'suis', 'id': 2204}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}, {'mot': '-', 'id': 2195}, {'mot': 'je', 'id': 2196}, {'mot': 'enregistrer', 'id': 2197}, {'mot': 'mes', 'id': 2198}, {'mot': 'mes', 'id': 2199}, {'mot': 'bagages', 'id': 2200}, {'mot': '?', 'id': 2201}, {'mot': 'je', 'id': 2202}, {'mot': 'suis', 'id': 2203}, {'mot': 'suis', 'id': 2204}, {'mot': 'suis', 'id': 2205}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}, {'mot': '-', 'id': 2195}, {'mot': 'je', 'id': 2196}, {'mot': 'enregistrer', 'id': 2197}, {'mot': 'mes', 'id': 2198}, {'mot': 'mes', 'id': 2199}, {'mot': 'bagages', 'id': 2200}, {'mot': '?', 'id': 2201}, {'mot': 'je', 'id': 2202}, {'mot': 'suis', 'id': 2203}, {'mot': 'suis', 'id': 2204}, {'mot': 'suis', 'id': 2205}, {'mot': 'suis', 'id': 2206}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}, {'mot': '-', 'id': 2195}, {'mot': 'je', 'id': 2196}, {'mot': 'enregistrer', 'id': 2197}, {'mot': 'mes', 'id': 2198}, {'mot': 'mes', 'id': 2199}, {'mot': 'bagages', 'id': 2200}, {'mot': '?', 'id': 2201}, {'mot': 'je', 'id': 2202}, {'mot': 'suis', 'id': 2203}, {'mot': 'suis', 'id': 2204}, {'mot': 'suis', 'id': 2205}, {'mot': 'suis', 'id': 2206}, {'mot': 'sur', 'id': 2207}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}, {'mot': '-', 'id': 2195}, {'mot': 'je', 'id': 2196}, {'mot': 'enregistrer', 'id': 2197}, {'mot': 'mes', 'id': 2198}, {'mot': 'mes', 'id': 2199}, {'mot': 'bagages', 'id': 2200}, {'mot': '?', 'id': 2201}, {'mot': 'je', 'id': 2202}, {'mot': 'suis', 'id': 2203}, {'mot': 'suis', 'id': 2204}, {'mot': 'suis', 'id': 2205}, {'mot': 'suis', 'id': 2206}, {'mot': 'sur', 'id': 2207}, {'mot': 'sur', 'id': 2208}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}, {'mot': '-', 'id': 2195}, {'mot': 'je', 'id': 2196}, {'mot': 'enregistrer', 'id': 2197}, {'mot': 'mes', 'id': 2198}, {'mot': 'mes', 'id': 2199}, {'mot': 'bagages', 'id': 2200}, {'mot': '?', 'id': 2201}, {'mot': 'je', 'id': 2202}, {'mot': 'suis', 'id': 2203}, {'mot': 'suis', 'id': 2204}, {'mot': 'suis', 'id': 2205}, {'mot': 'suis', 'id': 2206}, {'mot': 'sur', 'id': 2207}, {'mot': 'sur', 'id': 2208}, {'mot': 'sur', 'id': 2209}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}, {'mot': '-', 'id': 2195}, {'mot': 'je', 'id': 2196}, {'mot': 'enregistrer', 'id': 2197}, {'mot': 'mes', 'id': 2198}, {'mot': 'mes', 'id': 2199}, {'mot': 'bagages', 'id': 2200}, {'mot': '?', 'id': 2201}, {'mot': 'je', 'id': 2202}, {'mot': 'suis', 'id': 2203}, {'mot': 'suis', 'id': 2204}, {'mot': 'suis', 'id': 2205}, {'mot': 'suis', 'id': 2206}, {'mot': 'sur', 'id': 2207}, {'mot': 'sur', 'id': 2208}, {'mot': 'sur', 'id': 2209}, {'mot': 'le', 'id': 2210}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}, {'mot': '-', 'id': 2195}, {'mot': 'je', 'id': 2196}, {'mot': 'enregistrer', 'id': 2197}, {'mot': 'mes', 'id': 2198}, {'mot': 'mes', 'id': 2199}, {'mot': 'bagages', 'id': 2200}, {'mot': '?', 'id': 2201}, {'mot': 'je', 'id': 2202}, {'mot': 'suis', 'id': 2203}, {'mot': 'suis', 'id': 2204}, {'mot': 'suis', 'id': 2205}, {'mot': 'suis', 'id': 2206}, {'mot': 'sur', 'id': 2207}, {'mot': 'sur', 'id': 2208}, {'mot': 'sur', 'id': 2209}, {'mot': 'le', 'id': 2210}, {'mot': 'le', 'id': 2211}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}, {'mot': '-', 'id': 2195}, {'mot': 'je', 'id': 2196}, {'mot': 'enregistrer', 'id': 2197}, {'mot': 'mes', 'id': 2198}, {'mot': 'mes', 'id': 2199}, {'mot': 'bagages', 'id': 2200}, {'mot': '?', 'id': 2201}, {'mot': 'je', 'id': 2202}, {'mot': 'suis', 'id': 2203}, {'mot': 'suis', 'id': 2204}, {'mot': 'suis', 'id': 2205}, {'mot': 'suis', 'id': 2206}, {'mot': 'sur', 'id': 2207}, {'mot': 'sur', 'id': 2208}, {'mot': 'sur', 'id': 2209}, {'mot': 'le', 'id': 2210}, {'mot': 'le', 'id': 2211}, {'mot': 'vol', 'id': 2212}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}, {'mot': '-', 'id': 2195}, {'mot': 'je', 'id': 2196}, {'mot': 'enregistrer', 'id': 2197}, {'mot': 'mes', 'id': 2198}, {'mot': 'mes', 'id': 2199}, {'mot': 'bagages', 'id': 2200}, {'mot': '?', 'id': 2201}, {'mot': 'je', 'id': 2202}, {'mot': 'suis', 'id': 2203}, {'mot': 'suis', 'id': 2204}, {'mot': 'suis', 'id': 2205}, {'mot': 'suis', 'id': 2206}, {'mot': 'sur', 'id': 2207}, {'mot': 'sur', 'id': 2208}, {'mot': 'sur', 'id': 2209}, {'mot': 'le', 'id': 2210}, {'mot': 'le', 'id': 2211}, {'mot': 'vol', 'id': 2212}, {'mot': 'AF022', 'id': 2213}]\n",
      "[{'mot': 'où', 'id': 2190}, {'mot': 'où', 'id': 2191}, {'mot': 'dois', 'id': 2192}, {'mot': 'dois', 'id': 2193}, {'mot': 'dois', 'id': 2194}, {'mot': '-', 'id': 2195}, {'mot': 'je', 'id': 2196}, {'mot': 'enregistrer', 'id': 2197}, {'mot': 'mes', 'id': 2198}, {'mot': 'mes', 'id': 2199}, {'mot': 'bagages', 'id': 2200}, {'mot': '?', 'id': 2201}, {'mot': 'je', 'id': 2202}, {'mot': 'suis', 'id': 2203}, {'mot': 'suis', 'id': 2204}, {'mot': 'suis', 'id': 2205}, {'mot': 'suis', 'id': 2206}, {'mot': 'sur', 'id': 2207}, {'mot': 'sur', 'id': 2208}, {'mot': 'sur', 'id': 2209}, {'mot': 'le', 'id': 2210}, {'mot': 'le', 'id': 2211}, {'mot': 'vol', 'id': 2212}, {'mot': 'AF022', 'id': 2213}, {'mot': '.', 'id': 2214}]\n",
      "\tstatic int[][] adjacencymatrix = new int[][] {\n",
      "\t\tnew int[] {"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "list indices must be integers or slices, not dict",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-132-d2b1cab25188>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     29\u001b[0m     \u001b[0mtest\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     30\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mtableau\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 31\u001b[1;33m         \u001b[1;32mif\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtableau\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m==\u001b[0m \u001b[0mk\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mand\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mtableau\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m==\u001b[0m \u001b[0mj\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     32\u001b[0m             \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"1\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mend\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m''\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     33\u001b[0m             \u001b[0mtest\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: list indices must be integers or slices, not dict"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import sqlite3 \n",
    "import string\n",
    "import json\n",
    "connection2 = sqlite3.connect(r\"d:\\Users\\sbenabid\\Desktop\\SQLiteDatabaseBrowserPortable\\Data\\deux_ph.db\")\n",
    "cur2 = connection2.cursor()\n",
    "query2 = \"SELECT Token FROM BDDTest WHERE NumMOT\"\n",
    "cur2.execute(query2)\n",
    "row2 = cur2.fetchall()\n",
    "#n=0\n",
    "''''tableau = []\n",
    "for i in row2:\n",
    "    n=n+1\n",
    "    dico = {\"mot\":i[0],\"id\":n}\n",
    "    tableau.append(dico)\n",
    "    \n",
    "    #print(dico)\n",
    "    print(tableau)\n",
    "    #print(type(dico))'''\n",
    "\n",
    "print(\"\tstatic int[][] adjacencymatrix = new int[][] {\")\n",
    "nbCas = 1\n",
    "for k in range(1,len(tableau)+2):\n",
    "    for l in range(0,nbCas):\n",
    "        nb = 0\n",
    "#       print(k)\n",
    "print(\"\t\tnew int[] {\", end = '')\n",
    "for j in range(0,len(tableau)):\n",
    "    i = 0\n",
    "    test = 0\n",
    "    for i in tableau:\n",
    "        if ((tableau[i][0] == k) and (tableau[i][1])[1] == j):\n",
    "            print(\"1\", end = '')\n",
    "            test = 1\n",
    "            nb = nb + 1\n",
    "            i = i+1\n",
    "            if (test == 0):\n",
    "                print(\"0\", end = '')\n",
    "                if (j+1 < len(tableau)):\n",
    "                    print(\",\", end = '')\n",
    "                    nbCas = nb\n",
    "                    print(\"},\")\n",
    "                    k = k+1               "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import sqlite3 \n",
    "import string\n",
    "import json\n",
    "connexion = sqlite3.connect(r\"d:\\Users\\sbenabid\\Desktop\\SQLiteDatabaseBrowserPortable\\Data\\NooJ_SEL.db\")\n",
    "curseur = connexion.cursor()\n",
    "# creation d'une table\n",
    "curseur.execute(\"CREATE TABLE IF NOT EXISTS NooJ2 ( Token TEXT, Lemme TEXT, NumPhrase INTEGER, NumMot INTEGER)\")\n",
    "\n",
    "\n",
    "# ajout de données à la base\n",
    "\n",
    "'''curseur.execute(\"INSERT INTO TEST(Token, Lemme) VALUES('où','où')\")\n",
    "curseur.execute(\"INSERT INTO TEST(Token, Lemme) VALUES('où','où')\")\n",
    "curseur.execute(\"INSERT INTO TEST(Token, Lemme) VALUES('dois','devoir')\")\n",
    "curseur.execute(\"INSERT INTO TEST(Token, Lemme) VALUES('dois','devoir')\")\n",
    "curseur.execute(\"INSERT INTO TEST(Token, Lemme) VALUES('dois','devoir')\")\n",
    "curseur.execute(\"INSERT INTO TEST(Token, Lemme) VALUES('tiret','tiret')\")\n",
    "curseur.execute(\"INSERT INTO TEST(Token, Lemme) VALUES('je','je')\")\n",
    "curseur.execute(\"INSERT INTO TEST(Token, Lemme) VALUES('enregistrer','enregistrer')\")\n",
    "curseur.execute(\"INSERT INTO TEST(Token, Lemme) VALUES('mes','mon')\")\n",
    "curseur.execute(\"INSERT INTO TEST(Token, Lemme) VALUES('bagages','bagage')\")\n",
    "curseur.execute(\"INSERT INTO TEST(Token, Lemme) VALUES('?','?')\")'''\n",
    "\n",
    "curseur.execute(\"INSERT INTO NooJ2(NumMot, NumPhrase) VALUES('1','1')\")\n",
    "\n",
    "# valider l'enregistrement dans la base\n",
    "connexion.commit()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\tstatic int[][] adjacencymatrix = new int[][] {\n",
      "\t\tnew int[] {0,1,0,0,0,0,0,0,0,0,0,0,0,0},\n",
      "\t\tnew int[] {0,0,1,0,0,0,0,0,0,0,0,0,0,0},\n",
      "\t\tnew int[] {0,0,0,1,0,0,0,0,0,0,0,0,0,0},\n",
      "\t\tnew int[] {0,0,0,0,1,0,0,0,0,0,0,0,0,0},\n",
      "\t\tnew int[] {0,0,0,0,0,1,0,0,0,0,0,0,0,0},\n",
      "\t\tnew int[] {0,0,0,0,0,0,1,0,0,0,0,0,0,0},\n",
      "\t\tnew int[] {0,0,0,0,0,0,0,1,0,0,0,0,0,0},\n",
      "\t\tnew int[] {0,0,0,0,0,0,0,0,1,0,0,0,0,0},\n",
      "\t\tnew int[] {0,0,0,0,0,0,0,0,0,1,0,0,0,0},\n",
      "\t\tnew int[] {0,0,0,0,0,0,0,0,0,0,1,0,0,0},\n",
      "\t\tnew int[] {0,0,0,0,0,0,0,0,0,0,0,1,0,0},\n",
      "\t\tnew int[] {0,0,0,0,0,0,0,0,0,0,0,0,1,0},\n",
      "\t\tnew int[] {0,0,0,0,0,0,0,0,0,0,0,0,0,0},\n",
      "\t},\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import sqlite3\n",
    "import string\n",
    "import json\n",
    "#connection=sql.connect(r'd:\\Users\\sbenabid\\Desktop\\SQLiteDatabaseBrowserPortable\\Data\\NooJ_final.db')\n",
    "connection = sqlite3.connect(r\"d:\\Users\\sbenabid\\Desktop\\SQLiteDatabaseBrowserPortable\\Data\\deux_ph.db\")\n",
    "cur = connection.cursor()\n",
    "\n",
    "tableau = [[]]\n",
    "del tableau[0]\n",
    "mot = [[0,0]]\n",
    "i=1\n",
    "j=1\n",
    "while 1:\n",
    "#    j=1\n",
    "    query= \"SELECT Token FROM BDDTest WHERE NumPhrase=1 AND NumMot=?\"\n",
    "    cur.execute(query, (i,))\n",
    "    row = cur.fetchone()\n",
    "    if row == None:\n",
    "#        print(\"None\")\n",
    "        break\n",
    "    while row != None:\n",
    "#        print(row[0])\n",
    "        xx = (row[0], j)\n",
    "        tableauBase = (i,xx)\n",
    "        tableau.append(tableauBase)\n",
    "        j = j+1\n",
    "        row = cur.fetchone()\n",
    "    i = i+1\n",
    "#print(tableau)\n",
    "#print(len(tableau))\n",
    "print(\"\tstatic int[][] adjacencymatrix = new int[][] {\")\n",
    "nbCas = 1\n",
    "for k in range(1,len(tableau)+2):\n",
    "#    print(nbCas)\n",
    "    for l in range(0,nbCas):\n",
    "        nb = 0\n",
    "#        print(k)\n",
    "        print(\"\t\tnew int[] {\", end = '')\n",
    "        for j in range(0,len(tableau)+2):\n",
    "            i = 0\n",
    "            test = 0\n",
    "            for ligne in tableau:\n",
    "#    print(tableau)\n",
    "#        print(tableau[i][0], end = '')\n",
    "#        print(tableau[i][1])\n",
    "#        print((tableau[i][1])[1])\n",
    "\n",
    "                if ((tableau[i][0] == k) and (tableau[i][1])[1] == j):\n",
    "                    print(\"1\", end = '')\n",
    "                    test = 1\n",
    "                    nb = nb + 1\n",
    "                i = i+1\n",
    "            if (test == 0):\n",
    "                print(\"0\", end = '')\n",
    "\n",
    "            if (j+1 < len(tableau)+2):\n",
    "                print(\",\", end = '')\n",
    "        nbCas = nb\n",
    "        print(\"},\")\n",
    "    k = k+1\n",
    "print(\"\t},\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 'Michael', 'Fox')\n",
      "(2, 'Adam', 'Miller')\n",
      "(3, 'Andrew', 'Peck')\n",
      "(4, 'James', 'Shroyer')\n",
      "(5, 'Eric', 'Burger')\n"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "data_person_name = [('Michael', 'Fox'),\n",
    "                    ('Adam', 'Miller'),\n",
    "                    ('Andrew', 'Peck'),\n",
    "                    ('James', 'Shroyer'),\n",
    "                    ('Eric', 'Burger')]\n",
    "\n",
    "con = sqlite3.connect(\":memory:\")\n",
    "c = con.cursor()\n",
    "\n",
    "c.execute('''CREATE TABLE q1_person_name\n",
    "             (name_id INTEGER PRIMARY KEY,\n",
    "              first_name varchar(20) NOT NULL,\n",
    "              last_name varchar(20) NOT NULL)''')\n",
    "c.executemany('INSERT INTO q1_person_name(first_name, last_name) VALUES (?,?)', data_person_name)\n",
    "\n",
    "for row in c.execute('SELECT * FROM q1_person_name'):\n",
    "    print(row)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import sqlite3\n",
    "import string\n",
    "import json\n",
    "\n",
    "connection = sqlite3.connect(r\"d:\\Users\\sbenabid\\Desktop\\SQLiteDatabaseBrowserPortable\\Data\\NooJ_final.db\")\n",
    "cur = connection.cursor()\n",
    "cur.execute(\"Select NumPhrase from NooJ where Token = 'mes' \")\n",
    "if len( cur.fetchall() ) == 9:\n",
    "    print(1)\n",
    "else:\n",
    "    print(2)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<sqlite3.Cursor object at 0x00000125E54B0260>\n"
     ]
    }
   ],
   "source": [
    "name='dois'\n",
    "cur.execute(\"select rowid from NooJ where Token = ?\", (name,))\n",
    "print(cur)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('suis',)\n",
      "('suis',)\n",
      "('suis',)\n",
      "('sur',)\n",
      "('sur',)\n",
      "('sur',)\n",
      "('le',)\n",
      "('le',)\n",
      "('vol',)\n",
      "('comptoir',)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "(None,)\n",
      "('où',)\n",
      "('où',)\n",
      "('dois',)\n",
      "('dois',)\n",
      "('dois',)\n",
      "('je',)\n",
      "('enregistrer',)\n",
      "('mes',)\n",
      "('mes',)\n",
      "('bagages',)\n",
      "('suis',)\n"
     ]
    }
   ],
   "source": [
    "for row in cur.execute('SELECT Token FROM NooJ ORDER BY ID'):\n",
    "    print(row)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sqlite3\n",
    "\n",
    "\n",
    "con= sqlite3.connect(r\"d:\\Users\\sbenabid\\Desktop\\SQLiteDatabaseBrowserPortable\\Data\\NooJ_final.db\")\n",
    "con.row_factory = sqlite3.Row\n",
    "cur = con.cursor()\n",
    "cur.execute(\"select 'dois' as Token, 1 \")\n",
    "for row in cur:\n",
    "    assert row[0] == row[\"Token\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
